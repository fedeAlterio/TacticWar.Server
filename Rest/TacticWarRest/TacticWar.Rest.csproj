<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <DockerfileContext>..\..</DockerfileContext>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="AspNetCoreRateLimit" Version="5.0.0" />
    <PackageReference Include="Azure.Monitor.OpenTelemetry.AspNetCore" Version="1.2.0" />
    <PackageReference Include="MediatR" Version="12.4.1" />
    <PackageReference Include="MediatR.Extensions.Microsoft.DependencyInjection" Version="11.1.0" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="8.0.8" />
    <PackageReference Include="OpenTelemetry" Version="1.9.0" />
    <PackageReference Include="OpenTelemetry.Exporter.Console" Version="1.9.0" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.9.0" />
    <PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.9.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.9.0" />
    <PackageReference Include="Swashbuckle.AspNetCore.Swagger" Version="6.7.3" />
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerGen" Version="6.7.3" />
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerUI" Version="6.7.3" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\DependencyInjection\TacticWar.Lib.Extensions.Microsoft.DependencyInjection\TacticWar.DependencyInjection.csproj" />
    <ProjectReference Include="..\..\Lib\TacticWarLib\TacticWar.Lib.csproj" />
  </ItemGroup>
  <PropertyGroup>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
  </PropertyGroup>
  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="ClientApp\angular.json" />
    <Content Include="ClientApp\package-lock.json" />
    <Content Include="ClientApp\package.json" />
    <Content Include="ClientApp\tsconfig.app.json" />
    <Content Include="ClientApp\tsconfig.json" />
    <Content Include="ClientApp\tsconfig.spec.json" />
  </ItemGroup>
  <ItemGroup>
    <None Include="wwwroot\Build\tacticwar.data.unityweb" />
    <None Include="wwwroot\Build\tacticwar.framework.js.unityweb" />
    <None Include="wwwroot\Build\tacticwar.loader.js" />
    <None Include="wwwroot\Build\tacticwar.wasm.unityweb" />
  </ItemGroup>
  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --configuration production" />
    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
</Project>